#!/usr/bin/env python3
"""
Environment Setup Script for AI Meeting Summarizer
This script helps you configure your environment variables properly.
"""

import os
import sys
from pathlib import Path

def create_env_file():
    """Create .env file with proper configuration"""
    
    # Check if .env already exists
    env_file = Path('.env')
    if env_file.exists():
        print("‚ö†Ô∏è  .env file already exists!")
        response = input("Do you want to overwrite it? (y/N): ").strip().lower()
        if response != 'y':
            print("‚ùå Setup cancelled.")
            return False
    
    print("\nüîß Setting up environment configuration...")
    print("=" * 50)
    
    # Get Gemini API Key
    print("\nüìã STEP 1: Google Gemini API Key")
    print("To get your free API key:")
    print("1. Visit: https://makersuite.google.com/app/apikey")
    print("2. Sign in with your Google account")
    print("3. Click 'Create API Key'")
    print("4. Copy the generated key")
    print()
    
    api_key = input("Enter your Gemini API key (or press Enter to skip): ").strip()
    
    if not api_key:
        api_key = "your_gemini_api_key_here"
        print("‚ö†Ô∏è  Using placeholder - AI features will be limited!")
    
    # Get Email Configuration (Optional)
    print("\nüìß STEP 2: Email Configuration (Optional)")
    print("This is used for sending notifications and reports.")
    print("You can skip this step if you don't need email features.")
    print()
    
    email = input("Enter your Gmail address (or press Enter to skip): ").strip()
    if not email:
        email = "your_email@gmail.com"
    
    app_password = ""
    if email != "your_email@gmail.com":
        print("\nFor Gmail, you'll need an App Password:")
        print("1. Enable 2-Factor Authentication on your Google account")
        print("2. Go to: https://myaccount.google.com/apppasswords")
        print("3. Generate an app password for 'Mail'")
        print()
        app_password = input("Enter your Gmail App Password (or press Enter to skip): ").strip()
        if not app_password:
            app_password = "your_app_password"
    
    # Get Notification Recipients
    print("\nüì¨ STEP 3: Notification Recipients (Optional)")
    print("Enter email addresses that should receive critical task alerts.")
    print("Separate multiple emails with commas.")
    print()
    
    recipients = input("Enter notification email addresses (or press Enter to skip): ").strip()
    if not recipients:
        recipients = "admin@company.com,manager@company.com"
    
    # Create .env content
    env_content = f"""# AI Meeting Summarizer Environment Configuration
# Generated by setup_env.py

# Google Gemini AI API Key
GEMINI_API_KEY={api_key}

# Email Configuration (Optional - for notifications)
MAIL_USERNAME={email}
MAIL_PASSWORD={app_password}

# Email Recipients for Critical Task Alerts (comma-separated)
NOTIFICATION_RECIPIENTS={recipients}

# Flask Configuration
FLASK_ENV=development
FLASK_DEBUG=True
"""
    
    # Write .env file
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print("\n‚úÖ Environment configuration saved!")
        print("üìÅ Created: .env")
        
        # Validate the configuration
        print("\nüîç Validating configuration...")
        validate_configuration()
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error creating .env file: {e}")
        return False

def validate_configuration():
    """Validate the environment configuration"""
    from dotenv import load_dotenv
    
    # Load environment variables
    load_dotenv()
    
    api_key = os.environ.get('GEMINI_API_KEY')
    
    print(f"GEMINI_API_KEY: {'‚úÖ Set' if api_key and api_key != 'your_gemini_api_key_here' else '‚ö†Ô∏è  Placeholder'}")
    print(f"MAIL_USERNAME: {'‚úÖ Set' if os.environ.get('MAIL_USERNAME') != 'your_email@gmail.com' else '‚ö†Ô∏è  Placeholder'}")
    print(f"NOTIFICATION_RECIPIENTS: {'‚úÖ Set' if os.environ.get('NOTIFICATION_RECIPIENTS') != 'admin@company.com,manager@company.com' else '‚ö†Ô∏è  Placeholder'}")
    
    if api_key == "your_gemini_api_key_here":
        print("\n‚ö†Ô∏è  IMPORTANT: You need to set a real Gemini API key!")
        print("   Visit: https://makersuite.google.com/app/apikey")
        print("   Then edit the .env file and replace 'your_gemini_api_key_here' with your actual key.")
    else:
        print("\nüéâ Configuration looks good! You can now run the application.")

def main():
    """Main setup function"""
    print("üöÄ AI Meeting Summarizer - Environment Setup")
    print("=" * 50)
    
    # Check if we're in the right directory
    if not Path('app.py').exists():
        print("‚ùå Error: Please run this script from the project root directory")
        print("   (The directory containing app.py)")
        sys.exit(1)
    
    # Check if python-dotenv is installed
    try:
        import dotenv
    except ImportError:
        print("‚ùå Error: python-dotenv is not installed")
        print("   Please run: pip install python-dotenv")
        sys.exit(1)
    
    # Run setup
    if create_env_file():
        print("\nüéØ Next Steps:")
        print("1. If you used placeholders, edit the .env file with real values")
        print("2. Run: python app.py")
        print("3. Open: http://localhost:5000")
    else:
        print("\n‚ùå Setup failed. Please try again.")

if __name__ == "__main__":
    main()
